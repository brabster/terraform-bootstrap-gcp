name: Docker Image CI

on:
  schedule:
    - cron: '0 4 * * *'
  push:
    branches:
      - main
    paths:
      - Dockerfile
      - requirements.txt
      - .github/workflows

jobs:
  build_and_push:
    runs-on: ubuntu-latest # maintained by GitHub
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v3 # maintained by GitHub

    - name: Log in to the Container registry
      uses: docker/login-action@v2 # maintained by Docker
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v4 # maintained by Docker
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=schedule,pattern={{date 'YYYY-MM-DD'}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and load Docker image
      uses: docker/build-push-action@v4 # maintained by Docker
      with:
        context: .
        load: true
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VCS_REF=${{ github.sha }}
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

    - name: Vulnerability scan
      uses: google/osv-scanner-action/.github/workflows/osv-scanner-reusable.yml  # maintained by Google
      permissions:
        actions: read
        security-events: write
      with:
        scan-args: |-
          image
          ${{ fromJSON(steps.meta.outputs.json).tags[0] }}

    - name: Verify image tools
      run: |
        docker run --rm ${{ fromJSON(steps.meta.outputs.json).tags[0] }} bash -c " \
          set -e && \
          echo '--- Checking Terraform ---' && terraform --version && \
          echo '--- Checking gcloud ---' && gcloud --version && \
          echo '--- Checking Python ---' && python --version \
        "

    - name: Push Docker image
      run: |
        echo "${{ steps.meta.outputs.tags }}" | sed 's/,/\n/g' | xargs -I {} docker push {}

    - name: Save image to tarball on failure
      if: failure()
      run: docker save ${{ fromJSON(steps.meta.outputs.json).tags[0] }} -o image.tar

    - name: Upload image artifact on failure
      if: failure()
      uses: actions/upload-artifact@v4 # maintained by GitHub
      with:
        name: failed-image-${{ github.run_id }}
        path: image.tar
